<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>汇编 on Axiomaster&#39;s Site</title>
    <link>https://axiomaster.github.io/tags/%E6%B1%87%E7%BC%96/</link>
    <description>Recent content in 汇编 on Axiomaster&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Oct 2021 21:05:29 +0800</lastBuildDate><atom:link href="https://axiomaster.github.io/tags/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GCC Inline ASM</title>
      <link>https://axiomaster.github.io/post/2021-10-31-gcc-inline-asm/</link>
      <pubDate>Sun, 31 Oct 2021 21:05:29 +0800</pubDate>
      
      <guid>https://axiomaster.github.io/post/2021-10-31-gcc-inline-asm/</guid>
      <description>GCC 支持在C/C++代码中嵌入汇编代码，这些汇编代码被称作GCC Inline ASM——GCC内联汇编。这是一个非常有用的功能，有利于我们将一些C/C++语法无法表达指令直接潜入C/C++代码中，另外也允许我们直接写 C/C++代码中使用汇编编写简洁高效的代码。
1.基本内联汇编 GCC中基本的内联汇编非常易懂，我们先来看两个简单的例子：
__asm__(&amp;#34;movl %esp,%eax&amp;#34;); // 看起来很熟悉吧！ 或者是
__asm__(&amp;#34;movl $1,%eax // SYS_exitxor %ebx,%ebxint $0x80&amp;#34;); 或
__asm__(&amp;#34;movl $1,%eax/r/t&amp;#34; /&amp;#34;xor %ebx,%ebx/r/t&amp;#34; /&amp;#34;int $0x80&amp;#34; /); 2.基本内联汇编的格式 __asm__ __volatile__(&amp;#34;Instruction List&amp;#34;); 1、asm __asm__是GCC关键字asm的宏定义：
#define __asm__ asm __asm__或asm用来声明一个内联汇编表达式，所以任何一个内联汇编表达式都是以它开头的，是必不可少的。
2、Instruction List Instruction List是汇编指令序列。它可以是空的，比如：__asm__ __volatile__(&amp;quot;&amp;quot;); 或 __asm__ (&amp;quot;&amp;quot;); 都是完全合法的内联汇编表达式，只不过这两条语句没有什么意义。
但并非所有Instruction List为空的内联汇编表达式都是没有意义的，比如： __asm__ (&amp;quot;&amp;quot;:::&amp;quot;memory&amp;quot;); 就非常有意义，它向GCC声明：“我对内存作了改动”，GCC在编译的时候，会将此因素考虑进去。
我们看一看下面这个例子：
$ cat example1.c int main(int __argc, char* __argv[]) { int* __p = (int*)__argc; (*__p) = 9999; //__asm__(&amp;#34;&amp;#34;:::&amp;#34;memory&amp;#34;); if ((*__p) == 9999) { return 5; } return (*__p); } 在这段代码中，那条内联汇编是被注释掉的。在这条内联汇编之前，内存指针__p所指向的内存被赋值为9999，随即在内联汇编之后，一条if语句判断__p 所指向的内存与9999是否相等。很明显，它们是相等的。GCC在优化编译的时候能够很聪明的发现这一点。我们使用下面的命令行对其进行编译：</description>
    </item>
    
  </channel>
</rss>
